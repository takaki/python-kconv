dnl Process this file with autoconf to produce a configure script.
AC_INIT(__init__.py)
AC_CONFIG_HEADER(configure.h)

AC_PREFIX_DEFAULT(/usr/local)
AC_PREFIX_PROGRAM(python)

AC_ARG_WITH(python,
[  --with-python=Ver    Python-Version[2.1]],
pythonver=$with_python,pythonver=2.1)
AC_SUBST(pythonver)

dnl Checks for programs.
AC_PROG_CC
#AC_PROG_CC_C_O
AC_PATH_PROG(RM,rm)
AC_PATH_PROG(LD,ld)
AC_PATH_PROG(CP,cp)
AC_PATH_PROGS(TAR,gtar tar)
AC_PATH_PROG(MD,mkdir)
AC_PATH_PROG(TEST,test)
AC_PATH_PROG(PYTHON,python)
AC_PROG_INSTALL
# Set name for machine-dependent library files
AC_SUBST(MACHDEP)
AC_MSG_CHECKING(MACHDEP)
if test -z "$MACHDEP"
then
        ac_sys_system=`uname -s`
        if test "$ac_sys_system" = "AIX" ; then
                ac_sys_release=`uname -v`
        else
                ac_sys_release=`uname -r`
        fi
        ac_md_system=`echo $ac_sys_system |
                           tr -d '[/ ]' | tr '[[A-Z]]' '[[a-z]]'`
        ac_md_release=`echo $ac_sys_release |
                           tr -d '[/ ]' | sed 's/\..*//'`
        MACHDEP="$ac_md_system$ac_md_release"

        case $MACHDEP in
        '')     MACHDEP="unknown";;
        esac
fi


# Set info about shared libraries.
AC_SUBST(SO)
AC_SUBST(LDSHARED)
AC_SUBST(CCSHARED)
AC_SUBST(LINKFORSHARED)
# SO is the extension of shared libraries `(including the dot!)
# -- usually .so, .sl on HP-UX
AC_MSG_CHECKING(SO)
if test -z "$SO"
then
        case $ac_sys_system in
        hp*|HP*)   SO=.sl;;
        *)         SO=.so;;
        esac
fi
AC_MSG_RESULT($SO)
# LDSHARED is the ld *command* used to create shared library
# -- "ld" on SunOS 4.x.x, "ld -G" on SunOS 5.x, "ld -shared" on IRIX 5
# (Shared libraries in this instance are shared modules to be loaded into
# Python, as opposed to building Python itself as a shared library.)
AC_MSG_CHECKING(LDSHARED)
if test -z "$LDSHARED"
then
        case $ac_sys_system/$ac_sys_release in
        AIX*) LDSHARED="\$(srcdir)/ld_so_aix \$(CC)";;
        BeOS*) LDSHARED="\$(srcdir)/../BeOS/linkmodule -L.. -lpython\$(VERSION)";;
        IRIX/5*) LDSHARED="ld -shared";;
        IRIX*/6*) LDSHARED="ld ${SGI_ABI} -shared -all";;
        SunOS/4*) LDSHARED="ld";;
        SunOS/5*) LDSHARED="ld -G";;
        hp*|HP*) LDSHARED="ld -b";;
        OSF*) LDSHARED="ld -shared -expect_unresolved \"*\"";;
        DYNIX/ptx*) LDSHARED="ld -G";;
        next/*) 
                if test "$ns_dyld"
                then LDSHARED='$(CC) $(LDFLAGS) -bundle -prebind'
                else LDSHARED='$(CC) $(CFLAGS) -nostdlib -r';
                fi
                if test "$with_next_framework" ; then
                    LDSHARED="$LDSHARED \$(LDLIBRARY)"
                fi ;;
        Linux*) LDSHARED="gcc -shared";;
        dgux*) LDSHARED="ld -G";;
        FreeBSD*/3*) LDSHARED="gcc -shared";;
        FreeBSD*|OpenBSD*) LDSHARED="ld -Bshareable";;
        NetBSD*)
                if [[ "`$CC -dM -E - </dev/null | grep __ELF__`" != "" ]]
                then
                        LDSHARED="cc -shared"
                else
                        LDSHARED="ld -Bshareable"
                fi;;
        SCO_SV*) LDSHARED="cc -G -KPIC -Ki486 -belf -Wl,-Bexport";;
        *)      LDSHARED="ld";;
        esac
fi
AC_MSG_RESULT($LDSHARED)
# CCSHARED are the C *flags* used to create objects to go into a shared
# library (module) -- this is only needed for a few systems
AC_MSG_CHECKING(CCSHARED)
if test -z "$CCSHARED"
then
        case $ac_sys_system/$ac_sys_release in
        hp*|HP*) if test "$GCC" = yes;
                 then CCSHARED="-fpic";
                 else CCSHARED="+z";
                 fi;;
        Linux*) CCSHARED="-fpic";;
        FreeBSD*|OpenBSD*) CCSHARED="-fpic";;
        NetBSD*) CCSHARED="-fPIC";;
        SCO_SV*) CCSHARED="-KPIC -dy -Bdynamic";;
        IRIX*/6*)  case $CC in
                   *gcc*) CCSHARED="-shared";;
                   *) CCSHARED="";;
                   esac;;
        esac
fi
AC_MSG_RESULT($CCSHARED)
# LINKFORSHARED are the flags passed to the $(CC) command that links
# the python executable -- this is only needed for a few systems
AC_MSG_CHECKING(LINKFORSHARED)
if test -z "$LINKFORSHARED"
then
        case $ac_sys_system/$ac_sys_release in
        AIX*)   LINKFORSHARED='-Wl,-bE:python.exp -lld';;
        hp*|HP*)
            LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
        FreeBSD/3*) LINKFORSHARED="-Xlinker -export-dynamic";;
        Linux*) LINKFORSHARED="-Xlinker -export-dynamic";;
        # -u libsys_s pulls in all symbols in libsys
        next/2*|next/3*) LINKFORSHARED="-u libsys_s";;
        # -u __dummy makes the linker aware of the objc runtime
        # in System.framework; otherwise, __objcInit (referenced in
        # crt1.o) gets erroneously defined as common, which breaks dynamic
        # loading of any modules which reference it in System.framework
        next/4*|next/5*) LINKFORSHARED="-u __dummy -framework System" ;;
        SCO_SV*) LINKFORSHARED="-Bdynamic -dy -Wl,-Bexport";;
        NetBSD*) 
                if [[ "`$CC -dM -E - </dev/null | grep __ELF__`" != "" ]]
                then
                        LINKFORSHARED="-Wl,--export-dynamic"
                fi;;
        SunOS/5*) case $CC in
                  *gcc*)
                    if $CC -Xlinker -V 2>/dev/null | grep BFD >/dev/null
                    then
                        LINKFORSHARED="-Xlinker --export-dynamic"
                    fi;;
                  esac;;
        esac
fi
AC_MSG_RESULT($LINKFORSHARED)

AC_ARG_ENABLE(optimize,
[  --enable-optimize       optimize python code],
OPTIMIZE="yes",OPTIMIZE="no")
AC_SUBST(OPTIMIZE)

dnl Checks for libraries.
PATH_TO_LIBGCC=`$CC -v 2>&1 | head -n 1 | awk '{print $4}' | sed 's/specs//'`
test -z $PATH_TO_LIBGCC && PATH_TO_LIBGCC=./
AC_CHECK_LIB(gcc,__pure_virtual,LIBS=$LIBS\ -L$PATH_TO_LIBGCC)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_FUNCS(memcpy)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

dnl Checks for library functions.
dnl AC_CHECK_FUNC(__builtin_new,LIBS=$LIBS\ -lgcc,LIBOBJS=$LIBOBJS\ opnew.o)
dnl AC_SUBST(LIBOBJS)

AC_OUTPUT(Makefile src/Makefile)
